/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* res=new ListNode();
        ListNode* toreturn=new ListNode();
        toreturn=res;
        while(l1!=nullptr & l2!=nullptr){
            if(l1->val<=l2->val){
                ListNode* temp=new ListNode();
                temp->val=l1->val;
                temp->next=NULL;
                res->next=temp;
                res=temp;
                l1=l1->next;
            }
            else{
                ListNode* temp=new ListNode();
                temp->val=l2->val;
                temp->next=NULL;
                res->next=temp;
                res=temp;
                l2=l2->next;
            }
        }
        while(l1!=nullptr){
            ListNode* temp=new ListNode();
            temp->val=l1->val;
            temp->next=NULL;
            res->next=temp;
            res=temp;
            l1=l1->next;
        }
        while(l2!=nullptr){
            ListNode* temp=new ListNode();
            temp->val=l2->val;
            temp->next=NULL;
            res->next=temp;
            res=temp;
            l2=l2->next;
        }
        return toreturn->next;
    }
};
